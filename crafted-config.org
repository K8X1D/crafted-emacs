:DOC-CONFIG:
#+PROPERTY: header-args :mkdirp yes :comments no :tangle config.el
#+STARTUP: fold
:END:


* Files headers

#+html: <details><summary>config.el</summary>
#+BEGIN_SRC emacs-lisp
;;; config.el -- Crafted Emacs user customization file -*- lexical-binding: t; -*-
#+END_SRC
#+html: </details>

#+html: <details><summary>early-config.el</summary>
#+BEGIN_SRC emacs-lisp :tangle early-config.el
;;; early-config.el -- Crafted Emacs user (early) customization file -*- lexical-binding: t; -*-
#+END_SRC
#+html: </details>

#+html: <details><summary>k8x1d-org.el</summary>
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-org.el 
;;; k8x1d-org.el -- Org customizations -*- lexical-binding: t; -*-

;; Copyright (C) 2022  Kevin Kaiser

;; Author: Kevin Kaiser <k8x1d@oryp6>
;; Keywords: lisp
#+END_SRC
#+html: </details>

#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-python.el 
;;; k8x1d-python.el -- Org customizations -*- lexical-binding: t; -*-

;; Copyright (C) 2022  Kevin Kaiser

;; Author: Kevin Kaiser <k8x1d@oryp6>
;; Keywords: lisp
#+END_SRC
#+html: </details>

#+html: <details><summary>k8x1d-julia.el</summary>
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-julia.el 
;;; k8x1d-julia.el -- Org customizations -*- lexical-binding: t; -*-

;; Copyright (C) 2022  Kevin Kaiser

;; Author: Kevin Kaiser <k8x1d@oryp6>
;; Keywords: lisp
#+END_SRC
#+html: </details>

#+html: <details><summary>k8x1d-R.el</summary>
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-R.el 
;;; k8x1d-R.el -- Org customizations -*- lexical-binding: t; -*-

;; Copyright (C) 2022  Kevin Kaiser

;; Author: Kevin Kaiser <k8x1d@oryp6>
;; Keywords: lisp
#+END_SRC
#+html: </details>

#+html: <details><summary>k8x1d-R.el</summary>
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-git.el 
;;; k8x1d-git.el -- Org customizations -*- lexical-binding: t; -*-

;; Copyright (C) 2022  Kevin Kaiser

;; Author: Kevin Kaiser <k8x1d@oryp6>
;; Keywords: lisp
#+END_SRC
#+html: </details>

* Early configurations
Prefer newer version for every packages
#+BEGIN_SRC emacs-lisp :tangle early-config.el
  (setq package-archive-priorities nil)
#+END_SRC

Remove gui elements
#+BEGIN_SRC emacs-lisp :tangle early-config.el
  (setq use-dialog-box nil) ;; remove gui box
#+END_SRC

* Modules used
** Crafted modules
#+BEGIN_SRC emacs-lisp 
  (require 'crafted-defaults)    ; Sensible default settings for Emacs
  (require 'crafted-updates)     ; Tools to upgrade Crafted Emacs
  (require 'crafted-completion)  ; selection framework based on `vertico`
  (require 'crafted-ui)          ; Better UI experience (modeline etc.)
  (require 'crafted-windows)     ; Window management configuration
  (require 'crafted-editing)     ; Whitspace trimming, auto parens etc.
  (require 'crafted-evil)        ; An `evil-mode` configuration
  (require 'crafted-project)     ; built-in alternative to projectile
  (require 'crafted-speedbar)    ; built-in file-tree
  (require 'crafted-screencast)  ; show current command and binding in modeline
  (require 'crafted-pdf-reader)  ; pdf support
  (require 'crafted-latex)       ; latex support
  (require 'crafted-lisp)        ; lisp support
  ;;(require 'crafted-python)      ; python support
  ;;(require 'crafted-compile)     ; automatically compile some emacs lisp files  TODO: repair bug
#+END_SRC

** Custom crafted modules
#+BEGIN_SRC emacs-lisp 
  (require 'k8x1d-org)           ; org-appear, clickable hyperlinks etc.
#+END_SRC

#+BEGIN_SRC emacs-lisp 
  (require 'k8x1d-python)           ; org-appear, clickable hyperlinks etc.
#+END_SRC
** Custom modules
#+BEGIN_SRC emacs-lisp 
  (require 'k8x1d-julia)         ; julia support
  (require 'k8x1d-R)             ; R support
  (require 'k8x1d-git)           ; git support
#+END_SRC

* GUI
# TODO: rename section and reclassify  
Variable pitch
#+BEGIN_SRC emacs-lisp 
(add-hook 'emacs-startup-hook
          (lambda ()
            (custom-set-faces
             `(default ((t (:font "DejaVu Sans Mono 16"))))
             `(fixed-pitch ((t (:inherit (default)))))
             `(fixed-pitch-serif ((t (:inherit (default)))))
             `(variable-pitch ((t (:font "DejaVu Sans 16")))))))

#+END_SRC

Theme
#+BEGIN_SRC emacs-lisp 
  (setq inhibit-x-resources t) ;; ignore xressources
  (crafted-package-install-package 'doom-themes)
  (progn
    (disable-theme 'deeper-blue)          ; first turn off the deeper-blue theme
    (load-theme 'doom-gruvbox t))       ; load the doom-gruvbox theme
  ;;(progn
  ;;  (disable-theme 'deeper-blue)          ; first turn off the deeper-blue theme
  ;;  (load-theme 'modus-vivendi t))       ; load the doom-palenight theme
#+END_SRC

Start-up message
#+BEGIN_SRC emacs-lisp 
(customize-set-variable 'crafted-startup-inhibit-splash t)
#+END_SRC

Transparency
#+BEGIN_SRC emacs-lisp
  (unless (featurep 'pgtk)
    (set-frame-parameter (selected-frame) 'alpha '(85 . 85))
    (add-to-list 'default-frame-alist '(alpha . (85 . 85)))
    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
    (add-to-list 'default-frame-alist '(fullscreen . maximized))

    ;; ;; Set transparency of emacs
    (defun kk/transparency (value)
      "Sets the transparency of the frame window. 0=transparent/100=opaque"
      (interactive "nTransparency Value 0 - 100 opaque:")
      (set-frame-parameter (selected-frame) 'alpha value)))

  ;; For emacs pgtk >= 29
  (when (featurep 'pgtk)
    (if (version< emacs-version "29")
        ;; initial transparency
        (set-frame-parameter nil 'alpha-background 100)
      (add-to-list 'default-frame-alist '(alpha-background . 100))

      ;; function to change transparency
      (defun kk/transparency (value)
        "Sets the transparency of the frame window. 0=transparent/100=opaque"
        (interactive "nTransparency Value 0 - 100 opaque:")
        (set-frame-parameter (selected-frame) 'alpha-background value))))
#+END_SRC

Scheme specifications
#+BEGIN_SRC emacs-lisp
  (setq geiser-default-implementation 'guile)
  (setq scheme-program-name "guile")
#+END_SRC

Centralize backup files to $HOME/.saves
#+BEGIN_SRC emacs-lisp 
(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
    '(("." . "~/.saves/"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups
#+END_SRC

Centralize autosave files to $HOME/.saves
#+BEGIN_SRC emacs-lisp 
(setq auto-save-file-name-transforms
  `((".*" "~/.cache/emacs/saves/" t))))
#+END_SRC


Julia idiosyncrasies
#+BEGIN_SRC emacs-lisp 
(setq julia-vterm-repl-program (concat (getenv "HOME") "/.nix-profile/bin/julia -t 4"))
(setq eglot-jl-default-environment "~/.julia/environments/v1.7")
;; (setq eglot-connect-timeout 60)
(setq eglot-connect-timeout 600)
(setq eglot-jl-julia-command (concat (getenv "HOME") "/.nix-profile/bin/julia"))
#+END_SRC

Tab-bar
#+BEGIN_SRC emacs-lisp 
  (setq tab-bar-show nil)
  (setq tab-bar-new-tab-choice "*scratch*")
#+END_SRC

Change all prompts to y or n
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Automatic visual mode for text
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'visual-line-mode)
#+end_src

Follow symlink
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

Group under a wheel minor mode
#+BEGIN_SRC emacs-lisp
  (crafted-package-install-package 'minions)
  (add-hook 'after-init-hook 'minions-mode)
#+END_SRC

Modeline adjustment
#+BEGIN_SRC emacs-lisp
(setq doom-modeline-height 10) ; optional
(setq doom-modeline-bar-width 4)
(custom-set-faces
  '(mode-line ((t (:family "DejaVu Sans Mono" :height 0.8))))
  '(mode-line-active ((t (:family "DejaVu Sans Mono" :height 0.8)))) ; For 29+
  '(mode-line-inactive ((t (:family "DejaVu Sans Mono" :height 0.8)))))
#+END_SRC

Password-store interaction
#+BEGIN_SRC emacs-lisp
  (crafted-package-install-package 'pass)
#+END_SRC

Line-number
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

Pdf support
#+BEGIN_SRC emacs-lisp
(setq TeX-view-program-selection '((output-pdf "PDF Tools")))
(add-hook 'pdf-view-mode-hook 'pdf-view-midnight-minor-mode)
#+END_SRC


* Additional packages
** High performance terminal
#+BEGIN_SRC emacs-lisp 
(crafted-package-install-package 'vterm)
(global-set-key (kbd "C-c t") 'vterm-other-window)
(defun kk/new-vterm-instance ()
  (interactive)
  (vterm t))
(global-set-key (kbd "C-c T") 'kk/new-vterm-instance)
(add-hook 'vterm-mode-hook 'visual-line-mode)
#+END_SRC
** Mixed mode
#+BEGIN_SRC emacs-lisp 
  (crafted-package-install-package 'mixed-pitch)
  (add-hook 'text-mode-hook 'mixed-pitch-mode)
#+END_SRC
** CSV mode
#+BEGIN_SRC emacs-lisp 
  (crafted-package-install-package 'csv-mode)
#+END_SRC

Don't ask for evaluation when using babel
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

natural tab in src block
#+begin_src emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC

Do not remove initial white space on export
#+begin_src emacs-lisp
(setq org-src-preserve-indentation t)
#+END_SRC

* Custom modules
** k8x1d-org
Packages
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-org.el 
  (require 'crafted-org)
  (crafted-package-install-package 'org-superstar) ;; bullets customization
  (crafted-package-install-package 'evil-org) ;; evil support for org-agenda
  (crafted-package-install-package 'toc-org) ;; Table of content management
#+END_SRC

Configurations
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-org.el 
  (setq org-superstar-remove-leading-stars t)
  (setq org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●"))
  (setq org-superstar-special-todo-items t)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-org.el 
  (setq org-startup-indented t
        org-pretty-entities t
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
        org-image-actual-width '(600))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-org.el 
  (global-set-key (kbd "C-c o a a") 'org-agenda)
  (global-set-key (kbd "C-c o a l") 'org-agenda-list)
  (global-set-key (kbd "C-c o a t") 'org-todo-list)
  (setq org-directory "~/org")
  (setq org-agenda-include-all-todo nil)
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-include-diary t)
  (setq org-agenda-columns-add-appointments-to-effort-sum t)
  (setq org-agenda-custom-commands nil)
  (setq org-agenda-default-appointment-duration 60)
  (setq org-agenda-mouse-1-follows-link t)
  (setq org-agenda-skip-unavailable-files t)
  (setq org-agenda-use-time-grid nil)
  (setq org-agenda-files (list org-directory))
  (setq org-default-notes-file (concat org-directory "/todo.org"))
  (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)
#+END_SRC

Hooks
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-org.el 
  (add-hook 'org-mode-hook 'org-superstar-mode)
  (add-hook 'org-mode-hook (lambda ()
                             (require 'evil-org)
                             (evil-org-set-key-theme '(navigation insert textobjects additional calendar))))
  (add-hook 'org-agenda-mode-hook (lambda ()
                                    (require 'evil-org-agenda)
                                    (evil-org-agenda-set-keys)))
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'org-mode-hook 'toc-org-mode)
#+END_SRC

** k8x1d-python
Packages
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-python.el 
  (require 'crafted-python)
#+END_SRC

Configurations
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-python.el 
  (setq python-shell-interpreter (concat (getenv "HOME") "/.guix-extra-profiles/code/code/bin/python3.9"))
  (setq org-babel-python-command (concat (getenv "HOME") "/.guix-extra-profiles/code/code/bin/python3.9"))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))
#+END_SRC

** k8x1d-julia
Packages
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-julia.el 
(crafted-package-install-package 'julia-mode)
(crafted-package-install-package 'julia-vterm)
(crafted-package-install-package 'ob-julia-vterm)
(crafted-package-install-package 'eglot-jl)
#+END_SRC

Configurations
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-julia.el 
(eglot-jl-init)
#+END_SRC

Hooks
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-julia.el 
(add-hook 'julia-mode-hook 'julia-vterm-mode)
(add-hook 'org-mode-hook (lambda ()
                           (add-to-list 'org-babel-load-languages '(julia-vterm . t))
                           (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)))
(add-hook 'julia-mode-hook #'eglot-ensure)
#+END_SRC

** k8x1d-R
Packages
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-R.el 
(crafted-package-install-package 'ess)
#+END_SRC

Hooks
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-R.el 
(add-hook 'ess-r-mode-hook #'eglot-ensure)
#+END_SRC

** k8x1d-git
Packages
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-git.el 
(crafted-package-install-package 'magit)
(crafted-package-install-package 'magit-todos)
(crafted-package-install-package 'forge)
#+END_SRC

Hooks
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-git.el 
  (add-hook 'magit-mode-hook (lambda ()
                               (magit-todos-mode)
                               (require 'forge)))
#+END_SRC

** k8x1d-ivy
Packages
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-git.el 
(crafted-package-install-package 'magit)
(crafted-package-install-package 'magit-todos)
(crafted-package-install-package 'forge)
#+END_SRC

Hooks
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-git.el 
  (add-hook 'magit-mode-hook (lambda ()
                               (magit-todos-mode)
                               (require 'forge)))
#+END_SRC

* Files footers
#+html: <details><summary>config.el</summary>
#+BEGIN_SRC emacs-lisp 
(provide 'config)
;;; config.el ends here
#+END_SRC
#+html: </details>

#+html: <details><summary>early-config.el</summary>
#+BEGIN_SRC emacs-lisp 
(provide 'early-config)
;;; early-config.el ends here
#+END_SRC
#+html: </details>

#+html: <details><summary>k8x1d-org.el</summary>
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-org.el 
(provide 'k8x1d-org)
;;; k8x1d-org.el ends here
#+END_SRC
#+html: </details>

#+html: <details><summary>k8x1d-python.el</summary>
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-python.el 
(provide 'k8x1d-python)
;;; k8x1d-python.el ends here
#+END_SRC
#+html: </details>

#+html: <details><summary>k8x1d-org.el</summary>
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-julia.el 
(provide 'k8x1d-julia)
;;; k8x1d-julia.el ends here
#+END_SRC
#+html: </details>

#+html: <details><summary>k8x1d-R.el</summary>
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-R.el 
(provide 'k8x1d-R)
;;; k8x1d-R.el ends here
#+END_SRC

#+html: <details><summary>k8x1d-git.el</summary>
#+BEGIN_SRC emacs-lisp :tangle custom-modules/k8x1d-git.el 
(provide 'k8x1d-git)
;;; k8x1d-git.el ends here
#+END_SRC
#+html: </details>
